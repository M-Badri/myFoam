/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1812                                  |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     1812;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default                                Euler;
}

gradSchemes
{
    default                                Gauss linear;
}

defaultAdvScheme                           Minmod;
defaultAdvSchemeV                          MinmodV;

divSchemes
{
    default                                none;

    //momentum equation
    div(phi,U)                             Gauss $defaultAdvSchemeV;
    div(((rho*nuEff)*dev2(T(grad(U)))))    Gauss linear;

    //energy equation
    div(phi,h)                             Gauss $defaultAdvScheme;
    div(phi,K)                             Gauss $defaultAdvScheme;
    div(phi,omega)                         Gauss $defaultAdvScheme;

    //continuity equation
    div(phi,p)                             Gauss $defaultAdvScheme;
}

laplacianSchemes
{
    default                                Gauss linear corrected;
}

interpolationSchemes
{
    default                                linear;

    interpolate((rho*U))                   linear;

    reconstruct(rho)                       $defaultAdvScheme;
    reconstruct(psi)                       $defaultAdvScheme;
    reconstruct(p)                         $defaultAdvScheme;
    reconstruct(T)                         $defaultAdvScheme;
    reconstruct(U)                         $defaultAdvSchemeV;
    reconstruct(rho*U)                     $defaultAdvSchemeV;
    reconstruct(Dp)                        $defaultAdvScheme;
    flux(rhoU)                             linear;
}

snGradSchemes
{
    default                                corrected;
}

fluxRequired
{
    default                                none;
    p;
}

// ************************************************************************* //
